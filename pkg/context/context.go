// Package context provides service wide shared context values.
// Only add context specific values that are used across all services.
package context

import (
	"context"

	"go.opentelemetry.io/otel/trace"
	"go.uber.org/zap"

	"github.com/go-workshops/ppp/pkg/logging"
)

type key int

const (
	loggerCtxKey key = iota
	serviceNameCtxKey
)

// WithLogger stores a *zap.Logger inside a given context.
// Use this only when you want to create a sub logger using the With method,
// to populate some fields available across the entire HTTP service.
func WithLogger(ctx context.Context, logger *zap.Logger) context.Context {
	return context.WithValue(ctx, loggerCtxKey, logger)
}

// Logger retrieves *zap.Logger from a given context.
func Logger(ctx context.Context) *zap.Logger {
	fields := make([]zap.Field, 0)
	spanCtx := trace.SpanContextFromContext(ctx)
	if spanCtx.TraceID().IsValid() && spanCtx.SpanID().IsValid() {
		fields = append(fields, zap.String(logging.DefaultTraceIDKey, spanCtx.TraceID().String()))
		fields = append(fields, zap.String(logging.DefaultSpanIDKey, spanCtx.SpanID().String()))
	}

	logger, ok := ctx.Value(loggerCtxKey).(*zap.Logger)
	if ok {
		return logger.With(fields...)
	}

	return logging.GetLogger().With(fields...)
}

// WithServiceName stores the service name inside a given context.
func WithServiceName(ctx context.Context, serviceName string) context.Context {
	return context.WithValue(ctx, serviceNameCtxKey, serviceName)
}

// ServiceName retrieves the service name from a given context.
func ServiceName(ctx context.Context) string {
	serviceName, ok := ctx.Value(serviceNameCtxKey).(string)
	if ok {
		return serviceName
	}

	return ""
}

// WithSpanContext populates the context with a tracing span context constructed from the remote trace-id and span-id.
// Only use this when you want to populate trace-id and span-id coming from an external source, otherwise
// the trace-id and span-id should be autogenerated.
func WithSpanContext(ctx context.Context, traceIDHexString, spanIDHexString string) context.Context {
	logger := Logger(ctx)
	if traceIDHexString == "" || spanIDHexString == "" {
		return ctx
	}

	// The trace-id header in the w3c format ([16]byte aka length 32).
	// Example: 4bf92f3577b34da6a3ce929d0e0e4736
	// https://www.w3.org/TR/trace-context/#trace-id
	traceID, err := trace.TraceIDFromHex(traceIDHexString)
	if err != nil {
		logger.Error("could not convert trace-id from string", zap.Error(err))
		return ctx
	}

	// The span-id header in the w3c format ([8]byte aka length 16).
	// Example: 00f067aa0ba902b7
	// https://www.w3.org/TR/trace-context/#parent-id
	spanID, err := trace.SpanIDFromHex(spanIDHexString)
	if err != nil {
		logger.Error("could not convert span-id from string", zap.Error(err))
		return ctx
	}

	spanCtxCfg := trace.SpanContextConfig{
		TraceID:    traceID,
		SpanID:     spanID,
		TraceFlags: trace.FlagsSampled,
	}

	return trace.ContextWithRemoteSpanContext(ctx, trace.NewSpanContext(spanCtxCfg))
}
